{"version":3,"sources":["undefined.js"],"sourcesContent":["define('client-event-reporter', ['exports'], function (exports) {\n\n  'use strict';\n\n  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  /* globals console */\n\n  var RECORD_DELAY = 500; // ms\n  var MAX_PENDING_STATS = 20;\n\n  var INSTANCES_KEY = \"__Twitch__statsInstances_1\";\n\n  var ENVIRONMENT_CONFIGS = {\n    production: {\n      addr: \"https://client-event-reporter.twitch.tv\"\n    },\n    darklaunch: {\n      addr: \"https://client-event-reporter-darklaunch.twitch.tv\"\n    }\n  };\n\n  ENVIRONMENT_CONFIGS.staging = ENVIRONMENT_CONFIGS.darklaunch;\n  ENVIRONMENT_CONFIGS.development = ENVIRONMENT_CONFIGS.darklaunch;\n  ENVIRONMENT_CONFIGS.test = ENVIRONMENT_CONFIGS.darklaunch;\n\n  /**\n   * Stats backend\n   */\n\n  var StatsBackend = (function () {\n    function StatsBackend(config) {\n      _classCallCheck(this, StatsBackend);\n\n      if (!config) {\n        throw new Error(\"config is required\");\n      }\n\n      this._addr = config.addr;\n      this._resetCombinedStats();\n      this._recordDelay = RECORD_DELAY;\n      this._maxPendingStats = MAX_PENDING_STATS;\n    }\n\n    /**\n     * Client used by consumers\n     */\n\n    _createClass(StatsBackend, [{\n      key: \"logCounter\",\n      value: function logCounter(key) {\n        var count = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];\n        var sampleRate = arguments.length <= 2 || arguments[2] === undefined ? 1.0 : arguments[2];\n\n        this._combinedStats.counters.push({\n          key: key,\n          count: count,\n          sample_rate: sampleRate\n        });\n\n        this._record();\n      }\n    }, {\n      key: \"logTimer\",\n      value: function logTimer(key, milliseconds) {\n        var sampleRate = arguments.length <= 2 || arguments[2] === undefined ? 1.0 : arguments[2];\n\n        this._combinedStats.timers.push({\n          key: key,\n          milliseconds: milliseconds,\n          sample_rate: sampleRate\n        });\n\n        this._record();\n      }\n    }, {\n      key: \"logLine\",\n      value: function logLine(log_line) {\n        this._combinedStats.log_lines.push({ log_line: log_line });\n        this._record();\n      }\n    }, {\n      key: \"logGauge\",\n      value: function logGauge(key) {\n        this._combinedStats.gauges.push({ key: key });\n        this._record();\n      }\n    }, {\n      key: \"_resetCombinedStats\",\n      value: function _resetCombinedStats() {\n        this._combinedStats = {\n          timers: [],\n          counters: [],\n          log_lines: [],\n          gauges: []\n        };\n      }\n    }, {\n      key: \"_record\",\n      value: function _record() {\n        var _this = this;\n\n        if (this._numPendingStats() > this._maxPendingStats) {\n          if (this._flushTimeout) {\n            clearTimeout(this._flushTimeout);\n            this._flushTimeout = null;\n          }\n\n          this._flush();\n        } else if (!this._flushTimeout) {\n          this._flushTimeout = setTimeout(function () {\n            _this._flushTimeout = null;\n            _this._flush();\n          }, this._recordDelay);\n        }\n      }\n    }, {\n      key: \"_flush\",\n      value: function _flush() {\n        var combinedStats = this._combinedStats;\n\n        this._resetCombinedStats();\n\n        var url = this._addr + \"/v1/stats\";\n        var xhr = this._createCorsRequest('POST', url);\n\n        if (!xhr) {\n          console.log(\"WARNING: Cannot send stats because CORS is unsupported\");\n          return;\n        }\n\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify(combinedStats));\n      }\n    }, {\n      key: \"_numPendingStats\",\n      value: function _numPendingStats() {\n        var pending = this._combinedStats;\n        return pending.timers.length + pending.counters.length + pending.log_lines.length + pending.gauges.length;\n      }\n    }, {\n      key: \"_createCorsRequest\",\n      value: function _createCorsRequest(method, url) {\n        var xhr = new XMLHttpRequest();\n\n        if (\"withCredentials\" in xhr) {\n          xhr.open(method, url, true);\n        } else if (typeof XDomainRequest !== \"undefined\") {\n          xhr = new XDomainRequest();\n          xhr.open(method, url);\n        } else {\n          xhr = null;\n        }\n\n        return xhr;\n      }\n    }]);\n\n    return StatsBackend;\n  })();\n\n  var PrefixedStats = (function () {\n    function PrefixedStats(backend, prefix) {\n      _classCallCheck(this, PrefixedStats);\n\n      if (!backend) {\n        throw new Error(\"Missing backend\");\n      }\n      if (!prefix) {\n        throw new Error(\"Missing prefix\");\n      }\n\n      this._backend = backend;\n      this._prefix = prefix;\n    }\n\n    _createClass(PrefixedStats, [{\n      key: \"logCounter\",\n      value: function logCounter(key) {\n        var count = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];\n        var sampleRate = arguments.length <= 2 || arguments[2] === undefined ? 1.0 : arguments[2];\n\n        this._backend.logCounter(this._prefix + \".\" + key, count, sampleRate);\n      }\n    }, {\n      key: \"logTimer\",\n      value: function logTimer(key, milliseconds) {\n        var sampleRate = arguments.length <= 2 || arguments[2] === undefined ? 1.0 : arguments[2];\n\n        this._backend.logTimer(this._prefix + \".\" + key, milliseconds, sampleRate);\n      }\n    }, {\n      key: \"logLine\",\n      value: function logLine(line) {\n        this._backend.logLine(line);\n      }\n    }, {\n      key: \"logGauge\",\n      value: function logGauge(key) {\n        this._backend.logGauge(key);\n      }\n    }, {\n      key: \"setPrefix\",\n      value: function setPrefix(prefix) {\n        if (!prefix) {\n          throw new Error(\"Missing prefix\");\n        }\n        this._prefix = prefix;\n      }\n    }]);\n\n    return PrefixedStats;\n  })();\n\n  function getInstance(environment, prefix) {\n    var config = ENVIRONMENT_CONFIGS[environment];\n    if (!config) {\n      throw new Error(\"Invalid environment - got \" + environment);\n    }\n\n    if (!prefix) {\n      throw new Error(\"Invalid prefix - got \" + prefix);\n    }\n\n    window[INSTANCES_KEY] = window[INSTANCES_KEY] || {};\n    var instances = window[INSTANCES_KEY];\n\n    if (!instances[environment]) {\n      instances[environment] = new StatsBackend(config);\n    }\n\n    var backend = instances[environment];\n    return new PrefixedStats(backend, prefix);\n  }\n\n  var Stats = { getInstance: getInstance };\n\n  exports.Stats = Stats;\n\n  // This file is only included in the UMD js\n  var index = { Stats: Stats };\n\n  exports['default'] = index;\n\n});"],"names":[],"mappingsfile":"client-event-reporter.amd.js"}